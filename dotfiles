#!/bin/bash
_install() {
  command -v bat > /dev/null && echo ".config/bat/"
  command -v lb > /dev/null && echo ".config/lockbox/"
  command -v abuild >/dev/null && echo ".abuild/"
  command -v mksquashfs >/dev/null && echo ".local/libexec/genapkovl"
  case "$(basename "$SHELL")" in
    "bash")
      echo ".bash_aliases"
      echo ".bashrc"
      echo ".bash_profile"
      ;;
    "zsh")
      echo ".zshrc"
      ;;
  esac

  echo ".config/blap/config.toml"
  case $(uname) in
    "Linux")
      [ "$EDITOR" = "nvim" ] && echo ".config/nvim/"
      [ "$EDITOR" = "vim" ] && echo ".config/vim"
      if command -v git > /dev/null; then
        echo ".config/user-dirs.dirs"
        echo ".config/git/dev.config"
        echo ".config/git/config"
        command -v delta >/dev/null && echo ".config/git/delta.config"
      fi
      echo ".ssh/"
      echo ".config/blap/app/alpine.toml"
      echo ".config/blap/app/alpinevirt.toml"
      echo ".config/blap/app/vimplugins.toml"
      echo ".config/blap/bin/bat.toml"
      echo ".config/blap/bin/delta.toml"
      echo ".config/blap/bin/filen.toml"
      echo ".config/blap/bin/go.toml"
      echo ".config/blap/bin/just.toml"
      echo ".config/blap/bin/neovim.toml"
      echo ".config/blap/bin/rg.toml"
      echo ".config/blap/bin/shellcheck.toml"
      echo ".config/blap/src/age.toml"
      echo ".config/blap/src/blap.toml"
      echo ".config/blap/src/dotfiles.toml"
      echo ".config/blap/src/gittools.toml"
      echo ".config/blap/src/gofumpt.toml"
      echo ".config/blap/src/gopls.toml"
      echo ".config/blap/src/lb.toml"
      echo ".config/blap/src/revive.toml"
      echo ".config/blap/src/staticcheck.toml"
      echo ".local/libexec/golint"
      ;;
    "Darwin")
      echo ".local/libexec/vfu"
      echo ".local/libexec/transcode-media"
      echo ".config/blap/app/kitty.toml"
      echo ".config/blap/app/rectangle.toml"
      echo ".config/blap/bin/blap.toml"
      echo ".config/blap/bin/lb.toml"
      echo ".config/blap/src/dotfiles.toml"
      if command -v git > /dev/null; then
        echo ".gitconfig"
      fi
      VMDIR="$HOME/Library/com.ttypty/vms"
      if [ -d "$VMDIR" ]; then
        for vm in "$VMDIR/"**/*.json; do
          echo ".config/vfu/$(basename "$vm")"
        done
      fi
      ;;
  esac
  [ -n "$TERMINAL_EMULATOR" ] && echo ".config/$TERMINAL_EMULATOR/"
}

[ "$(uname)" = "Linux" ] && DEPLOYED_FILES="$HOME/.cache/dotfiles/"
[ "$(uname)" = "Darwin" ] && DEPLOYED_FILES="$HOME/Library/com.ttypty/dotfiles/"
[ -z "$DEPLOYED_FILES" ] && echo "unable to determine deploy location" && exit 1
DEPLOYED_FILES="${DEPLOYED_FILES}manifest"

DEPLOY=0
DRYRUN=0
CHECK=0
if [ -n "$1" ]; then
  case "$1" in
    "--dry-run")
      DRYRUN=1
      ;;
    "--check")
      CHECK=1
      ;;
    "--deploy")
      DEPLOY=1
      mkdir -p "$(dirname "$DEPLOYED_FILES")"
      rm -f "$DEPLOYED_FILES"
      ;;
    *)
      echo "unknown command: $1"
      exit 1
      ;;
  esac
fi

if [ "$CHECK" -eq 1 ]; then
  if [ -e "$DEPLOYED_FILES" ]; then
    if sha256sum -c "$DEPLOYED_FILES" 2>&1 | grep -v ': OK$' | sed 's/^/  /g' | sed "s#$HOME/##g" | sed '1i\
===
' | sed '1i\
[dotfiles]
'; then
      exit 1
    fi
    exit 0
  fi
fi

DIR=""
SET=""
FILE=""
for SET in $(_install | sort -u); do
  for FILE in $(find "$SET" -type f); do
    if [ "$CHECK" -eq 1 ]; then
      test ! -L "$HOME/$FILE" && echo "non-link dotfile: $FILE"
      continue
    fi
    [ "$DRYRUN" -eq 1 ] && echo "$FILE" | sed "s#HOME/##g"
    DIR=$(dirname "$FILE")
    [ "$DIR" != "." ] && mkdir -p "$HOME/$DIR"
    CMD="ln -sf"
    $CMD "$PWD/$FILE" "$HOME/$FILE"
    [ "$DEPLOY" -eq 1 ] && sha256sum "$PWD/$FILE" >> "$DEPLOYED_FILES"
  done
done

[ "$DEPLOY" -eq 1 ] && sha256sum "$PWD/dotfiles" >> "$DEPLOYED_FILES"

unset SET FILE DRYRUN CHECK
