#!/bin/sh -e
CACHE="$HOME/.cache/pkgversions"
mkdir -p "$CACHE"
CACHE="$CACHE/status"
LAST="$CACHE.last"
FORCE=0

if [ -n "$1" ]; then
  if [ "$1" != "force" ]; then
    echo "unknown command: $1"
    exit 1
  fi
  FORCE=1
fi

if [ "$FORCE" -eq 0 ] && [ -e "$LAST" ]; then
  if [ "$(find "$LAST" -type f -mmin -60 | wc -l)" -gt 0 ]; then
    echo "recent update check completed..."
    exit 0
  fi
fi

_header() {
  echo "$1:0:$1"
}

_version() {
  _header "$1"
  curl -L --silent "https://github.com/$1/releases.atom" | \
    grep "<title>" | \
    cut -d ">" -f 2- | cut -d "<" -f 1 | \
    grep "$2" | \
    grep '[0-9]' | \
    grep -v "weekly" | \
    grep -v '{}$' | \
    grep -v "release\." | \
    grep -v 'rc[0-9]' | \
    grep -v "beta" | \
    head -n 1 | \
    sed 's/[^0-9\. ]*//g' | \
    sed 's/^\s*//g' | \
    sed "s#^#$1:1: -> #"
}

_alpine() {
  grep -q '^ID=alpine$' /etc/os-release || return
  if grep '^ID=' /etc/os-release | grep -q -v '^ID=alpine$'; then
    return
  fi
  _header "alpine-release"
  version=$(git -c versionsort.suffix=- ls-remote --tags --sort=-v:refname "https://gitlab.alpinelinux.org/alpine/aports.git/" | \
    grep "refs/tags/v[0-9]" | \
    grep '\.[0-9]\+$' | \
    rev | cut -d '/' -f 1 | rev | head -n 1 | sed 's/^v//g')
  echo "alpine-release:1:  -> $version"
  major=$(echo "$version" | cut -d "." -f 1)
  minor=$(echo "$version" | cut -d "." -f 2)
  pkgver=$(curl --silent -L "https://gitlab.alpinelinux.org/alpine/aports/-/raw/$major.$minor-stable/main/linux-lts/APKBUILD?ref_type=heads" | grep -E '^(pkgver|pkgrel)=' | cut -d "=" -f 2- | tr '\n' '-' | sed 's/-$//g')
  _header "alpine-kernel"
  echo "alpine-kernel:1:  -> $pkgver"
}

{
  _alpine
  _version "golang/go"
  _version "neovim/neovim"
  _version "casey/just"
  _version "BurntSushi/ripgrep"
  _version "sharkdp/bat"
  _version "koalaman/shellcheck"
  _version "seanenck/lockbox"
  _version "seanenck/git-tools"
  _version "FiloSottile/age"
  _version "mvdan/gofumpt"
  _version "golang/tools" "gopls"
  _version "dominikh/go-tools"
  _version "mgechev/revive"
  _version "kovidgoyal/kitty"
  _version "rxhanson/Rectangle"
  _version "FilenCloudDienste/filen-cli"
} | sort | cut -d ":" -f 3- > "$CACHE"
[ ! -e "$LAST" ] && touch "$LAST"
if ! diff -u "$LAST" "$CACHE"; then
  printf "updated? (y/N) "
  read yesno
  case "$yesno" in
    "Y" | "y")
      mv "$CACHE" "$LAST"
      ;;
  esac
fi
