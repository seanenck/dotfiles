#!/usr/bin/python3
"""Sway management via ipc."""
from i3ipc import Connection, Event
import argparse


def main():
    """Program entry."""
    parser = argparse.ArgumentParser()
    parser.add_argument("mode")
    args = parser.parse_args()
    i3 = Connection()
    if args.mode == "focus-model":
        i3.on(Event.WINDOW_FOCUS, _focus_model_handler)
        i3.main()


def _focus_model_handler(i3, e):
    try:
        focused = i3.get_tree().find_focused()
        if _is_floating(focused):
            return
        windows = _get_unfocused(focused)
        for w in windows:
            if _is_floating(w):
                return
        mode = "splitv"
        if focused.rect.width > focused.rect.height:
            mode = "splith"
        i3.command(mode)
    except Exception as e:
        pass


def _get_unfocused(focused):
    return [x for x in focused.workspace() if x != focused and x.name]


def _is_floating(target):
    return target.type == "floating_con"


if __name__ == "__main__":
    main()
