#!/usr/bin/python3
"""Menu helper."""
import csv
import os
import urllib.parse
import shlex
import subprocess
import json

_APPS = {"firefox": ["firefox"],
         "kitty": ["kitty"],
         "volume": ["pavucontrol"],
         "mumble": ["mumble"]}


def _get_windows():
    p = subprocess.Popen(["swaymsg", "-t", "get_tree"],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    o, e = p.communicate()
    if e is not None and e != b'':
        return []
    windows = []
    j = json.loads(o)
    for output in j["nodes"]:
        if output.get("type") == "output":
            workspaces = output.get("nodes")
            for workspace in workspaces:
                if workspace.get("type") == "workspace":
                    windows.append((workspace.get("num"),
                                   _get_nodes(workspace)))
    return windows


def _get_nodes(workspace):
    nodes = workspace.get("floating_nodes")
    nodes.extend(_get_leaves(workspace))
    return nodes


def _get_leaves(workspace):
    leaves = []
    for node in workspace.get("nodes"):
        if len(node.get("nodes")):
            leaves.extend(_get_nodes(node))
        else:
            leaves.append(node)
    return leaves


def _load_opened():
    try:
        windows = _get_windows()
        indexing = []
        idents = []
        for idx, workspace in enumerate(windows):
            for window_idx, window in enumerate(workspace[1]):
                named = window.get("app_id")
                if not named:
                    props = window.get("window_properties")
                    if props:
                        named = props.get("class")
                if not named:
                    named = window.get("name")
                if not named:
                    continue
                indexing.append((idx, window_idx))
                idents.append("window: [{}]: {} ({})".format(workspace[0],
                                                             named,
                                                             window_idx))
        return indexing, idents, windows
    except:
        return [], [], []


def main():
    """Program entry."""
    home = os.environ["HOME"]
    window_idxs, windows, workspace_windows = _load_opened()
    with open(os.path.join(home, ".env", "workstations", "commands.csv")) as f:
        c = csv.DictReader(f)
        for o in c:
            _APPS[o["name"]] = shlex.split(o["command"])
    keys = sorted(_APPS.keys())
    keys += sorted(windows)
    count = str(len(keys))
    p = subprocess.Popen(["wofi",
                          "--show",
                          "dmenu",
                          "-W",
                          "20%",
                          "-L",
                          count,
                          "--style",
                          os.path.join(home, ".config/wofi/style.css")],
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.DEVNULL)
    for k in keys:
        p.stdin.write((k + "\n").encode())
    o, _ = p.communicate()
    chosen = o.decode().strip()
    if not chosen:
        return
    if chosen in windows:
        selected_id = windows.index(chosen)
        idx = window_idxs[selected_id]
        con_id = workspace_windows[idx[0]][1][idx[1]].get("id")
        subprocess.Popen(["swaymsg", "[con_id={}]".format(con_id), "focus"])
        return
    if chosen in keys:
        subprocess.run(_APPS[chosen])
        return
    parsed = urllib.parse.quote(chosen)
    subprocess.run(["firefox", "https://duckduckgo.com?q={}".format(parsed)])


if __name__ == "__main__":
    main()
