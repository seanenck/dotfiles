#!/bin/bash
CONFS=$PWD/.abuild
REPOS=/opt/repositories
CACHE=$HOME/.cache/apks
NAME=stable
if [ ! -e APKBUILD ]; then
    echo "no apkbuild"
    exit 1
fi

PACKS="$REPOS/$(basename $(dirname $PWD))"
if [ ! -d "$PACKS/x86_64" ]; then
    echo "repository does not exist"
    exit 1
fi

_pkgexists() {
   read -p "deploy new package? (y/N) " n
   if [[ "$n" == "y" ]]; then
       return
   fi
   exit 1
}

PKGNAME=$(basename $PWD)
if ! ls $PACKS/x86_64 | grep -q "^$PKGNAME"; then
    _pkgexists
fi

_clean() {
    local c
    while ! doas rm -rf $CONFS; do
        continue
    done
    for c in $PWD $PACKS; do
        while ! doas chown -R enck:enck $c; do
            continue
        done
    done
}

_cleanup() {
    _clean
    _duplicates
    echo "cleanup complete"
}

_get_packages() {
    local f bname name
    for f in $(find $PACKS -type f -name "*.apk"); do
        name=$(_get_name "$f") 
        if [ ! -z "$1" ]; then
            if [[ "$name" == "$1" ]]; then 
                echo "$f"
            fi
            continue
        fi
        echo "$f"
    done
}

_get_name() {
    basename $1 | rev | cut -d "-" -f 3- | rev
}

_ver() {
    basename $1 | rev | cut -d "-" -f 1,2 | cut -d "." -f 2- | rev
}

_duplicates() {
    local p name n a first other deletes cnt cmp
    deletes=()
    for p in $(_get_packages); do
        name=$(_get_name $p)
        a=()
        for n in $(_get_packages $name); do
            a+=($n) 
        done
        cnt=${#a[@]}
        if [ "$cnt" -gt 1 ]; then
            first="${a[0]}"
            for other in $(seq 1 $((cnt-1))); do
                other=${a[$other]}
                cmp=$(apk version -t $(_ver $first) $(_ver $other))
                case "$cmp" in
                    ">")
                        deletes+=($other)
                        ;;
                    "<")
                        deletes+=($first)
                        ;;
                esac
            done
        fi
    done
    if [ "${#deletes[@]}" -gt 0 ]; then
        echo "${deletes[*]}" | tr ' ' '\n' | sort -u
        read -p "delete ^ packages? (y/N) " n
        if [[ "$n" == "y" ]]; then 
            for p in $(echo ${deletes[*]} | sort -u); do
                rm -f $p
            done
        fi
    fi
}


errors=""
mkdir -p $CACHE $CONFS
_clean
podman build -f $HOME/.env/dotfiles/lib/apod/buildenv.Containerfile -t $NAME
cp -rL $HOME/.abuild $PWD
_podmanrun() {
    podman run -it --rm \
        -v $CONFS:$HOME/.abuild:U \
        -v $CONFS/localpkgs.rsa.pub:/etc/apk/keys/localpkgs.rsa.pub \
        -v $PWD:/apk:U \
        -v $PACKS:$HOME/packages:U \
        -v $REPOS/shared:$HOME/sharedpkgs:U \
        -v $REPOS/build:$HOME/buildpkgs:U \
        -v $CACHE:/etc/apk/cache \
        --workdir /apk \
        $NAME $@
    if [ $? -ne 0 ]; then
        _cleanup
        echo "^ error encountered"
        exit 1
    fi
}
_podmanrun doas /sbin/apk update
_podmanrun abuild sanitycheck
_podmanrun abuild verify
_podmanrun abuild -r
_cleanup
