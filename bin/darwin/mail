#!/bin/bash
# create a Mutt.app via Automator:
# AppleScript:
# `do shell script "open /Users/enck/.env/dotfiles/bin/darwin/mail"`

ETC=~/.env/machines/workstations/mail/
MAIL=~/.mail/
LOGFILE=${MAIL}sync.$(date +%Y-%m-%d).log
MAIRIX=${ETC}mairix
SCREEN_NAME="mail-quit"

if env | grep -q KITTY; then
    echo "do not run from kitty"
    exit 1
fi

_syncnow() {
    mbsync -V -c ${ETC}mbsyncrc -a
    mairix -f ${MAIRIX}
}

_sync() {
    local dt
    dt=$(date +%Y-%m-%dT%H:%M:%S)
    _syncnow 2>&1 | sed "s/^/$dt /g" > "$LOGFILE"
}

_echosync() {
    echo "syncing mail..."
    _sync
}

_contents() {
    find ${MAIL}maildir -type f | /opt/local/bin/rg "/(cur|new|tmp)/"
}

_quit() {
    sleep 3
    while : ; do
        if pgrep mutt > /dev/null; then
            sleep 1
            continue
        fi
        if pgrep isync > /dev/null; then
            sleep 1
            continue
        fi
        break
    done
    osascript -e "quit app \"Terminal\""
}

CMD=$1
if [ -n "$CMD" ]; then
    case "$CMD" in
        "quit")
            _quit
            ;;
        "sync")
            _sync
            ;;
        "search")
            mairix -f $MAIRIX ${@:2}
            ;;
        *)
            echo "unknown command; $CMD"
            exit 1
    esac
    exit 0
fi

clear

if [ -e "$LOGFILE" ]; then
    CNT=$(find "$LOGFILE" -type f -mmin -1 | wc -l)
else
    CNT=0
fi
if [ $CNT -eq 0 ]; then
    _echosync
fi
CONTENTS=${MAIL}mail.state
NEXT=$CONTENTS.delta
_contents > $CONTENTS
if ! screen -list 2>&1 | grep -q $SCREEN_NAME; then
    screen -dmS "$SCREEN_NAME" bash "$0" quit
fi
mutt -F ${ETC}muttrc
_contents > $NEXT
if ! diff -u $CONTENTS $NEXT; then
    _echosync
fi
