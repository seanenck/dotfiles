#!/usr/bin/env bash
PORT_CFG=$HOME/.config/macports/
PORT_CACHE=${LOCAL_CACHE}/ports
TOOL_CACHE=${LOCAL_CACHE}/remotes
BIN=$HOME/.fs
COMPLETIONS=$BIN/usr/local/share/bash-completion
NO_TOOLS="--no-tools"
NO_PORTS="--no-ports"
SYSUP_COMP="# bash completion for sys-upgrade                        -*- shell-script -*-

_sysupgrade() {
    local cur
    cur=\${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( \$(compgen -W \"$NO_PORTS $NO_TOOLS\" -- \$cur) )
}

complete -F _sysupgrade -o bashdefault -o default sys-upgrade"

_remote-setup() {
    local dir hash prev name cwd usrlocal
    usrlocal="$BIN/usr/local/bin/"
    mkdir -p "$usrlocal"
    name=$(echo "$1" | rev | cut -d "/" -f 1 | rev)
    dir="$TOOL_CACHE/$name"
    if [ ! -d "$dir" ]; then
        git clone "$1" "$dir"
    fi
    git -C "$dir" reset --hard
    git -C "$dir" pull
    hash="$TOOL_CACHE/$name.hash"
    prev="$hash.prev"
    git -C "$dir" log -n1 --format=%h > "$hash"
    touch "$prev"
    if ! diff -u "$prev" "$hash"; then
        if [ -e "$dir/configure" ]; then
            cwd=$PWD
            cd "$dir" || exit 1
            ./configure
            cd "$cwd" || exit 1
        fi
        if [ -e "$dir/Makefile" ] || [ -e "$dir/GNUmakefile" ]; then
            make -C "$dir"
        else
            if [ -e "$dir/meson.build" ]; then
                (cd "$dir" && meson setup build)
                ninja -C "$dir/build"
            else
                echo
                echo "$dir"
                echo "-> unknown build type"
                echo
                echo
                return
            fi
        fi
        if [ -z "$2" ]; then
            make -C "$dir" install DESTDIR="$BIN"
        else
            for f in "${@:2}"; do
                install -Dm755 "$dir/$f" "$usrlocal"
            done
        fi
    fi
    mv "$hash" "$prev"
}

_remote-tools() {
    echo "-> update git-based tools"
    _remote-setup "https://voidedtech.com/git/lockbox" "build/lb" "build/lb-diff" "build/lb-pwgen" "build/lb-rekey" "build/lb-rw" "build/lb-stats" "build/lb-totp" "build/lb-bash"
    _remote-setup "https://github.com/evansm7/vftool" "build/vftool"
    _remote-setup "https://github.com/leahneukirchen/mblaze.git"
    golangci-lint completion bash > "$COMPLETIONS/golangci-lint.bash"
    lb bash > "$COMPLETIONS/lb.bash"
}

_ports() {
    local port stat prev name target ports
    stat=$PORT_CACHE/last
    prev=$stat.prev
    echo "-> install/configure ports"
    ports=""
    while IFS= read -r port; do
        ports="$ports $port"
    done < "${PORT_CFG}install"
    echo "sudo port install $ports" >> "$stat"
    while IFS= read -r port; do
        name=$(echo "$port" | cut -d " " -f 1)
        target=$(echo "$port" | cut -d " " -f 2)
        echo "sudo port select --set $name $target" >> "$stat"
    done < "${PORT_CFG}select"
    chmod u+x "$stat"
    if [ "$(which python)" == "/usr/bin/python" ]; then
        rm "$prev"
    fi
    touch "$prev"
    if ! diff -u "$prev" "$stat"; then
        $stat
    fi
    mv "$stat" "$prev"
}

_sys-upgrade() {
    local f c
    c=$PWD
    if [ "$1" -eq 1 ]; then
        echo "-> update ports"
        if ! sudo echo "sudo check"; then
            echo "no sudo"
            return
        fi
        sudo port selfupdate
        sudo port upgrade outdated
        _ports
        echo "-> cleanup ports"
        sudo port uninstall inactive
        sudo port reclaim
    fi
    if [ "$2" -eq 1 ]; then
        echo "-> update kitty"
        kitty-updater
        vim-plugin-upgrade
        _remote-tools
        echo "$SYSUP_COMP" > "$COMPLETIONS/sys-upgrade.bash"
    fi
    cd "$c" || exit 1
}

mkdir -p "$PORT_CACHE" "$TOOL_CACHE" "$COMPLETIONS" "$BIN"
do_ports=1
do_tools=1
for i in "$@"; do
    case $i in
        "$NO_TOOLS")
            do_tools=0
            shift
            ;;
        "$NO_PORTS")
            do_ports=0
            shift
            ;;
        *)
            echo "unknown option: $i"
            exit 1
            ;;
    esac
done
_sys-upgrade $do_ports $do_tools
