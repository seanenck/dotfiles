#!/bin/bash
DIRECTORY="$HOME/VMs"
RSRC="Resources"
NAME=""
VERSION="3.15"
STORE="$DIRECTORY/$RSRC"
DL_ISO="https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/aarch64/alpine-standard-$VERSION.0-aarch64.iso"
SCREENPREFIX="vmr-"
MOUNT_ISO="$STORE/iso"
VMLINUZ="vmlinuz"
INITRD="initrd.img"
SCRIPTS="$DOTFILES/lib/vmr/"
STARTUP="start.sh"
INIT="machine.cfg"

if [ -z "$1" ]; then
    echo "command required"
    exit 1
fi

_setup() {
    local iso vmlinuz initrd versfile
    iso=$STORE/alpine.iso
    versfile=$STORE/$VERSION
    if [ ! -e "$versfile" ]; then
        if [ -d "$STORE" ]; then
            rm -rf "${STORE}"
        fi
    fi
    vmlinuz=$STORE/$VMLINUZ
    initrd=$STORE/$INITRD
    mkdir -p "$STORE"
    if [ ! -e "$iso" ]; then
        curl -L "$DL_ISO" > "$iso"
    fi
    if [ ! -e "$vmlinuz" ]; then
        _attach-now "$iso"
        (cd "$STORE" && cp "$MOUNT_ISO/boot/vmlinuz_lts." "$vmlinuz.gz")
        (cd "$STORE" && gzip -d "$vmlinuz.gz")
        chmod 644 "$vmlinuz"
    fi
    if [ ! -e "$initrd" ]; then
        _attach-now "$iso"
        (cd "$STORE" && cp "$MOUNT_ISO/boot/initramfs_lts." "$initrd")
        chmod 644 "$initrd"
    fi
    touch $versfile
    _detach-now
}

_detach-now() {
    if [ -d "$MOUNT_ISO" ]; then
        rm -rf "$MOUNT_ISO"
    fi
}

_attach-now() {
    if [ ! -d "$MOUNT_ISO" ]; then
        mkdir -p "$MOUNT_ISO"
        (cd "$SCRIPTS" && go run iso.go -src "$1" -dst "$MOUNT_ISO")
    fi
}

_clean-name() {
    echo "$@" | tr -cd '[:alnum:]._-'
}

_kill() {
    local tty pid
    _is-machine 
    tty=$(screen -list 2>&1 | grep "$SCREENPREFIX$NAME" | awk '{print $1}')
    if [ -n "$tty" ]; then
        screen -X -S "$tty" quit
    fi
    for pid in $(ps aux | grep vftool | grep "$DIRECTORY/$NAME/" | awk '{print $2}'); do
        kill -9 "$pid"
    done
}

_is-machine() {
    local dir
    dir=$DIRECTORY/$NAME
    if [ ! -d "$dir" ]; then
        echo "invalid machine"
        exit 1
    fi
}

_rm() {
    _is-machine
    rm -rf "${DIRECTORY:?}/$NAME"
}

_ready() {
    if ssh -o BatchMode=yes -o ConnectTimeout=5 -o PubkeyAuthentication=no -o PasswordAuthentication=no -o KbdInteractiveAuthentication=no -o ChallengeResponseAuthentication=no "$1" 2>&1 | grep -q "Permission denied"; then
        echo "yes"
    else
        echo "no"
    fi
}

_start() {
    local tty cnt isready ip dir
    _is-machine
    tty=$SCREENPREFIX$NAME
    cnt=$(screen -list 2>&1 | grep "$SCREENPREFIX$NAME" | awk '{print $1}' | wc -l)
    if [ "$cnt" -gt 0 ]; then
        echo "machine started"
        return
    fi
    dir=$DIRECTORY/$NAME
    screen -d -m -S "$tty" -- bash "$dir/$STARTUP"
    _waitup
    ip=$(_getssh)
    scp "$dir/$INIT" "$ip:/sbin/$INIT"
    ssh "$ip" -- /bin/ash "/sbin/$INIT"
    echo
    echo
    echo "ready:"
    echo "  ssh $ip"
    echo
}

_getssh() {
    local sship
    sship="root@192.168.64."$(ls $DIRECTORY/$NAME/ip.* | rev | cut -d "." -f 1 | rev)
    echo "$sship"
}

_waitup() {
    local sship isready
    isready="no"
    sship=$(_getssh)
    while [[ "$isready" == "no" ]]; do
        echo "machine not ready..."
        sleep 1
        isready=$(_ready "$sship")
    done
    echo "machine ready"
}

_new() {
    local name dir file ipaddr ip cnt
    if [ -z "$NAME" ]; then
        echo "name required"
        exit 1
    fi
    name=$(_clean-name "$NAME")
    if [[ "$name" != "$NAME" ]]; then
        echo "invalid name: $NAME"
        exit 1
    fi
    dir=$DIRECTORY/$name
    if [ -d "$dir" ]; then
        echo "machine exists"
        exit 1
    fi
    mkdir -p "$dir"
    for file in $VMLINUZ $INITRD; do
        echo "copying: $file"
        cp "$STORE/$file" "$dir/$file"
    done
    for ip in $(seq 2 254); do
        cnt=$(find "$DIRECTORY" -name "ip.$ip" | wc -l)
        if [ "$cnt" -eq 0 ]; then
            ipaddr=$ip
            touch "$dir/ip.$ip"
            break
        fi
    done
    if [ -z "$ipaddr" ]; then
        echo "unable to assign ip"
        exit 1
    fi
    sed "s#{IP}#$ipaddr#g;s#{NAME}#$NAME#g;s#{STORAGE}#$dir#g;s#{RESOURCES}#$STORE#g" "$SCRIPTS/lib.start.sh" > "$dir/$STARTUP"
    sed "s#{NAME}#$NAME#g;s#{VERS}#$VERSION#g" "$SCRIPTS/lib.init-alpine.sh" > "$dir/$INIT"
    _start
}

FIRST=1
COMMAND="$1"
for arg in "$@"; do
    if [ $FIRST -eq 1 ]; then
        FIRST=0
        shift
        continue
    fi
    case "$arg" in
        "--name")
            shift
            NAME="$1"
            shift
            ;;
    esac
done

if [[ "$COMMAND" == "bash" ]]; then
    sed "s#{STORAGE}#$DIRECTORY#g;s#{RESOURCES}#$RSRC#g" "$SCRIPTS/lib.completions.bash"
    exit 0
fi

if [[ "$COMMAND" != "ls" ]] && [[ "$COMMAND" != "up" ]]; then
    if [ -z "$NAME" ]; then
        echo "no machine name given"
        exit 1
    fi

    _setup
fi

case "$COMMAND" in
    "new")
        _new
        ;;
    "start")
        _start
        ;;
    "kill")
        _kill
        ;;
    "ls")
        ls "$DIRECTORY" | grep -v "$RSRC"
        ;;
    "up")
        screen -list | grep "$SCREENPREFIX" | awk '{print $1}' | cut -d "." -f 2- | sed "s#$SCREENPREFIX##g"
        ;;
    "rm")
        _kill
        _rm
        ;;
    *)
        echo "unknown command: $COMMAND"
        exit 1
        ;;
esac
