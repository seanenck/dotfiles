#!/usr/bin/env bash
PORT_CFG=$HOME/.config/macports/
PORT_CACHE=${LOCAL_CACHE}/ports
TOOL_CACHE=${LOCAL_CACHE}/remotes
BIN=$HOME/.bin
COMPLETIONS=$HOME/.completions
NO_TOOLS="--no-tools"
NO_PORTS="--no-ports"
SYSUP_COMP="# bash completion for sys-upgrade                        -*- shell-script -*-

_sysupgrade() {
    local cur
    cur=\${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( \$(compgen -W \"$NO_PORTS $NO_TOOLS\" -- \$cur) )
}

complete -F _sysupgrade -o bashdefault -o default sys-upgrade"

_vim-plugins() {
    echo "-> update vim plugins"
    for f in "vim-airline/vim-airline" "dense-analysis/ale"; do
        echo "$f"
        p="$HOME/.vim/pack/dist/start/"
        if [ ! -d $p ]; then
            mkdir -p $p
        fi
        p="$p"$(echo $f | cut -d "/" -f 2)
        if [ ! -d $p ]; then
            git clone "https://github.com/$f" $p
        fi
        git -C $p pull
    done
}

_remote-setup() {
    local dir hash prev name cwd
    name=$(echo $1 | rev | cut -d "/" -f 1 | rev)
    dir=$TOOL_CACHE/$name
    if [ ! -d $dir ]; then
        git clone $1 $dir
    fi
    git -C $dir reset --hard
    git -C $dir pull
    hash="$TOOL_CACHE/$name.hash"
    prev="$hash.prev"
    git -C $dir log -n1 --format=%h > $hash
    touch $prev
    diff -u $prev $hash
    if [ $? -ne 0 ]; then
        if [ -e "$dir/configure" ]; then
            cwd=$PWD
            cd $dir
            ./configure
            cd $cwd
        fi
        if [ -e "$dir/Makefile" ]; then
            make -C $dir
        fi
        for f in ${@:2}; do
            install -Dm755 $dir/$f "$BIN"
        done
    fi
    mv $hash $prev
}

_remote-tools() {
    echo "-> update git-based tools"
    _remote-setup "https://voidedtech.com/cgit/lockbox" "bin/lb" "bin/lb-diff" "bin/lb-pwgen" "bin/lb-rekey" "bin/lb-rw" "bin/lb-stats" "bin/lb-totp" "bin/lb-bash"
    _remote-setup "https://github.com/evansm7/vftool" "build/vftool" 
    golangci-lint completion bash > $COMPLETIONS/golangci-lint.bash
    vmr completions > $COMPLETIONS/vmr.bash
    lb bash > $COMPLETIONS/lb.bash
}

_ports() {
    local port stat prev script oldifs name target
    stat=$PORT_CACHE/last
    prev=$stat.prev
    echo "-> install/configure ports"
    oldifs=$IFS
    IFS=$'\n'
    for port in $(cat ${PORT_CFG}install); do
        echo "sudo port install $port" >> $stat
    done
    for port in $(cat ${PORT_CFG}select); do
        name=$(echo $port | cut -d " " -f 1)
        target=$(echo $port | cut -d " " -f 2)
        echo "sudo port select --set $name $target" >> $stat
    done
    IFS=$oldifs
    chmod u+x $stat
    if [ "$(which python)" == "/usr/bin/python" ]; then
        rm $prev
    fi
    touch $prev
    diff -u $prev $stat
    if [ $? -ne 0 ]; then
        $stat
    fi
    mv $stat $prev
}

_sys-upgrade() {
    local f p c
    c=$PWD
    if [ $1 -eq 1 ]; then
        echo "-> update ports"
        sudo echo "sudo check"
        if [ $? -ne 0 ]; then
            echo "no sudo"
            return
        fi
        sudo port selfupdate
        sudo port upgrade outdated
        _ports
        echo "-> cleanup ports"
        sudo port uninstall inactive
        sudo port reclaim
    fi
    if [ $2 -eq 1 ]; then
        echo "-> update kitty"
        kitty-updater
        _vim-plugins
        _remote-tools
        echo "$SYSUP_COMP" > $COMPLETIONS/sys-upgrade.bash
    fi
    cd $c
}

mkdir -p $PORT_CACHE
mkdir -p $TOOL_CACHE
mkdir -p $COMPLETIONS
mkdir -p $BIN
do_ports=1
do_tools=1
for i in "$@"; do
    case $i in
        $NO_TOOLS)
            do_tools=0
            shift
            ;;
        $NO_PORTS)
            do_ports=0
            shift
            ;;
        *)
            echo "unknown option: $i"
            exit 1
            ;;
    esac
done
_sys-upgrade $do_ports $do_tools
