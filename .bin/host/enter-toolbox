#!/usr/bin/env bash
CONF="$HOME/.config/voidedtech/toolbox.bash"
if [ -z "$1" ]; then
  echo "command required"
  exit 1
fi

if [ ! -e "$CONF" ]; then
  echo "missing config file"
  exit 1
fi
source "$CONF"

_update() {
  if ! toolbox list --containers | grep -q "$1"; then
    echo "$1 does not exist"
    return
  fi
  if ! toolbox run --container "$1" sudo dnf update; then
    echo "failed to dnf update"
    exit 1
  fi
}

_list() {
  {
    echo "${!BOXES[@]}" | tr ' ' '\n'
    toolbox list --containers | tail -n +2 | awk '{print $2}'
  } | sort -u
}

case "$1" in
  "--list")
  _list
  exit 0
  ;;
  "--update")
  for f in $(_list); do
    echo "updating: $f"
    _update "$f"
    echo
  done
  exit 0
  ;;
esac

if [ $(echo "$1" | wc -c) -le 3 ]; then
  echo "name must be >= 3 characters"
  exit 1
fi
HAS=$(toolbox list --containers | awk '{print $2}' | grep "^$1\$")
if [ -z "$HAS" ]; then
  for NAME in "${!BOXES[@]}"; do
    if [ "$NAME" == "$1" ]; then
      SPEC="${BOXES[$NAME]}"
    fi
  done
  if [ -z "$ALLOW_ANY_TOOLBOX" ] || [ "$ALLOW_ANY_TOOLBOX" != "true" ]; then
    if [ -z "$SPEC" ]; then
      echo "can NOT create unknown toolbox, use ALLOW_ANY_TOOLBOX=true to override"
      exit 1
    fi
  fi
  declare -a PKGS=()
  for P in "${PACKAGES[@]}"; do
    PKGS+=("$P")
  done
  if [ -n "$SPEC" ]; then
    for P in "${SPEC[@]}"; do
      PKGS+=("$P")
    done
  fi
  if ! toolbox create -y "$1"; then
    echo "failed to create $1"
    exit 1
  fi
  _update "$1"
  if ! toolbox run --container "$1" sudo dnf install -y ${PKGS[@]}; then
    echo "failed to install default packages"
    exit 1
  fi
fi
exec toolbox enter "$1"
