#!/usr/bin/env bash
ROOT_DIR="$HOME/.env/dotfiles"
CONFIGS="$ROOT_DIR/containers"
CONTAINER_HOME="/home/enck"
CONTAINER_SHELL="/bin/bash"
RPMS="$HOME/.cache/mirrors/rpms"
if [ ! -d "$CONFIGS" ]; then
  echo "no configs directory?"
  exit 1
fi
source "$CONFIGS/go.env"
if [ -z "$1" ]; then
  echo "argument required"
  exit 1
fi
case "$1" in
  "--list")
    ls "$CONFIGS" | grep "\.Containerfile" | grep -v alpine | cut -d "." -f 1 | sort
    exit 0
    ;;
esac
CONTAINER="$CONFIGS/$1.Containerfile"
if [ ! -e "$CONTAINER" ]; then
  echo "$1 is not a valid container definition"
  exit 1
fi
if [ ! -d "$RPMS" ]; then
  echo "$RPMS is not mirrored"
  exit 1
fi

COMMON_CACHE_DIR="$HOME/.cache/ctx/$1/.cache"
mkdir -p "$COMMON_CACHE_DIR"
BUILD_ARGS=""
VOLUME_ARGS=""
BASELINE=1
case "$1" in
  "dev")
    BUILD_ARGS='--build-arg=GOFLAGS='$GOFLAGS
    VOLUME_ARGS='
      --volume '$COMMON_CACHE_DIR':'$CONTAINER_HOME'/.cache:rslave
      --volume '$PKGS_STORE':'$CONTAINER_HOME'/.store/pkgs:rslave
    '
    ;;
esac

if [ $BASELINE -eq 1 ]; then
  EFMVERS=$(git -C "$RPMS" show HEAD:SPECS/efmlsp.spec | grep "^Version:" | cut -d ":" -f 2 | sed 's/\s*//g')
  if ! (cd "$ROOT_DIR" && podman build \
                          --build-arg=CONTAINER_SHELL=$CONTAINER_SHELL \
                          --build-arg=DOTFILES=$(git -C $ROOT_DIR log -n 1 --format=%h) \
                          --build-arg=CONTAINER_HOME=$CONTAINER_HOME \
                          --build-arg=PASS=$(lb show systems/workstations/enck) \
                          --build-arg=USERID=$UID \
                          --build-arg=GOFLAGS="$GOFLAGS" \
                          --build-arg=EFMVER=$EFMVERS \
                          -f "$CONFIGS/"alpine.Containerfile -t alpine-baseline .); then
    exit 1
  fi
fi

if ! (cd "$ROOT_DIR" && podman build \
                        --build-arg=CONTAINER_HOME=$CONTAINER_HOME \
                        "$BUILD_ARGS" \
                        -f "$CONFIGS/$1.Containerfile" -t "$1" .); then
  exit 1
fi

exec podman run \
    --hostname "$1.container" \
    --name "$1-$(diceware)" \
    --network host \
    --rm \
    -it \
    --security-opt label=disable \
    --env "SHELL=/bin/bash" \
    --env "HOME=$CONTAINER_HOME" \
    --env "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR" \
    --env "CONTAINER_TYPE=$1" \
    --volume /etc/hosts:/etc/hosts:ro \
    --volume /etc/localtime:/etc/localtime:ro \
    --volume /etc/resolv.conf:/etc/resolv.conf:ro  \
    --volume "$HOME/workspace":"$CONTAINER_HOME/workspace":rslave  \
    --volume "$HOME/.ssh":"$CONTAINER_HOME/.ssh":rslave \
    --volume "$HOME/.cache/mirrors":"$CONTAINER_HOME/.cache/mirrors":rslave \
    --volume "$HOME/.config/nvim/pack":"$CONTAINER_HOME/.config/nvim/pack":ro \
    --volume "$HOME/.cache/oclone.hst":"$CONTAINER_HOME/.cache/oclone.hst":rslave \
    --volume "$HOME/.env/local/.config/voidedtech/git.bash":"$CONTAINER_HOME"/.config/voidedtech/git.bash:ro \
    --volume "$HOME/.env/local/.ssh/config":"$CONTAINER_HOME"/.ssh/config:ro \
    --volume "$HOME/.env/local/.ssh/allowed_signers":"$CONTAINER_HOME"/.ssh/allowed_signers:ro \
    $VOLUME_ARGS \
    --volume /tmp:/tmp:rslave \
    --volume /run/user/$UID:/run/user/$UID:rslave \
    --ulimit host --annotation run.oci.keep_original_groups=1 \
    --mount type=devpts,destination=/dev/pts \
    --userns keep-id \
    --workdir "$CONTAINER_HOME" \
    localhost/"$1":latest $CONTAINER_SHELL
