#!/bin/sh

_commands() {
  for REPO in $@; do
    DISPLAY=$(echo "$REPO" | sed "s#$HOME/##g")
    {
      (cd "$REPO" && 
        git update-index -q --refresh | head -n 1| sed 's/^/update-index:/g'
        git diff-index --name-only HEAD -- | head -n 1 | sed 's/^/diff-index:/g' &
        git status -sb | grep "\[ahead " | head -n 1 | sed 's/^/status:/g' &
        git ls-files --other --exclude-standard | head -n 1 | sed 's/^/ls-files:/g' &
        git branch --show-current | grep -v -E 'main|master' | head -n 1 | sed 's/^/branch:/g' &
        wait
      )
    } | cut -d ":" -f 1 | sed "s#^#-> $DISPLAY (#g" | sed 's/$/)/g' &
  done
  wait
}

IS_PWD=0
if [ -n "$1" ]; then
  if [ "$1" = "--pwd" ]; then
    IS_REV=$(git -C "$PWD" rev-parse --is-inside-work-tree 2>/dev/null)
    if [ "$IS_REV" = "true" ]; then
      RESULT=$(_commands "$PWD")
    else
      exit 0
    fi
    IS_PWD=1
  fi
fi
if [ "$IS_PWD" -eq 0 ]; then
  REPOS=""
  while read -r DIR; do
    for SUB in "$HOME/$DIR"/*; do
      if [ ! -d "$SUB/.git" ]; then
        continue
      fi
      REPOS="$REPOS $SUB"
    done
  done < "$HOME/.config/voidedtech/uncommit"
  RESULT=$(_commands $REPOS)
fi
RESULT=$(echo "$RESULT" | sed 's/^\s*//g' | sed  's/\s*$//g')
HAS=0
if [ -n "$RESULT" ]; then
  HAS=1
fi
if [ -n "$RESULT" ]; then
  RESULT=$(echo "$RESULT" | sed 's#//#/#g')
fi
if [ -z "$1" ]; then
  if [ -n "$RESULT" ]; then
    echo "$RESULT"
  fi
else
  case "$1" in
  "--motd")
    if [ -n "$RESULT" ]; then
      echo "uncommitted"
      echo "==="
      echo "$RESULT" | sed "s#^#  #g"
      echo
    fi
    ;;
  "--pwd")
    if [ "$HAS" -eq 0 ]; then
      printf '\e[32m%s\e[0m' "(clean)"
    else
      printf '\e[31m%s\e[0m' "(dirty)"
    fi
    ;;
  *)
    echo "unknown subcommand"
    exit 1
    ;;
  esac
fi
