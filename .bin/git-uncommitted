#!/usr/bin/env bash
_uncommit() {
  local result
  result=$(git -C "$1" ${@:2})
  if [ -n "$result" ]; then
    echo "uncommit:$1,$2,$result"
  fi
}

_git-commands() {
  {
    _uncommit "$1" update-index -q --refresh
    _uncommit "$1" diff-index --name-only HEAD --
    _uncommit "$1" status -sb | grep "\[ahead "
    _uncommit "$1" ls-files --other --exclude-standard
    _uncommit "$1" branch --show-current | grep -v -E ',(main|master)$'
  } | grep '^uncommit:' | cut -d ':' -f 2- | cut -d ',' -f 1,2 | sed 's/,/ (/g' | sed 's/$/)/g' | sort -u
}

git-uncommit() {
  local res d sub has r ispwd isrev paths
  ispwd=0
  if [ -n "$1" ]; then
    if [ "$1" == "--pwd" ]; then
      isrev=$(git -C "$PWD" rev-parse --is-inside-work-tree 2>/dev/null)
      if [ "$isrev" == "true" ]; then
        res=$(_git-commands "$PWD")
        ispwd=1
      else
        exit 0
      fi
    fi
  fi
  if [ "$ispwd" -eq 0 ]; then
    for d in .env workspace; do
      d="$HOME/$d"
      for sub in "$d"/*; do
        if [ ! -d "$sub/.git" ]; then
          continue
        fi
        paths="$paths $sub"
      done
    done
    for sub in $paths; do
      r=$(_git-commands "$sub")
      if [ -z "$res" ]; then
        res=$r
      else
        res=$(printf "%s\n%s\n" "$res" "$r")
      fi
    done
  fi
  res=$(echo "$res" | sed 's/^\s*//g' | sed  's/\s*$//g')
  has=0
  if [ -n "$res" ]; then
    has=1
  fi
  if [ -z "$1" ]; then
    echo "$res"    
  else
    case "$1" in
    "--pwd")
      if [ $has -eq 0 ]; then
        printf '\e[32m%s\e[0m' "(clean)"
      else
        printf '\e[31m%s\e[0m' "(dirty)"
      fi
      ;;
    "--quiet")
        ;;
    *)
      echo "unknown subcommand"
      exit 1
      ;;
    esac
  fi
    exit $has
}

git-uncommit "$1"
